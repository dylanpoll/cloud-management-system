
# get a fresh start (remember, the 64-bit OS is still under development)
 sudo apt-get update
 sudo apt-get upgrade
# install pip and pip3
 sudo apt-get install python-pip python3-pip
# remove old versions, if not placed in a virtual environment (let pip search for them)
 sudo pip uninstall tensorflow
 sudo pip3 uninstall tensorflow
# install the dependencies (if not already onboard)
 sudo apt-get install gfortran
 sudo apt-get install libhdf5-dev libc-ares-dev libeigen3-dev
 sudo apt-get install libatlas-base-dev libopenblas-dev libblas-dev
 sudo apt-get install liblapack-dev
 sudo -H pip3 install pybind11
 sudo -H pip3 install Cython==0.29.21
# install h5py with Cython version 0.29.21 (± 6 min @1950 MHz)
 sudo -H pip3 install h5py==2.10.0
# upgrade setuptools 40.8.0 -> 50.3.2
 sudo -H pip3 install --upgrade setuptools
# install gdown to download from Google drive
 pip3 install gdown
# copy binairy
 sudo cp ~/.local/bin/gdown /usr/local/bin/gdown
# download the wheel
 gdown https://drive.google.com/uc?id=1fR9lsi_bsI_npPFB-wZyvgjbO0V9FbMf
# install TensorFlow (± 63 min @1950 MHz)
 sudo -H pip3 install tensorflow-2.2.0-cp37-cp37m-linux_aarch64.whl
from 
https://qengineering.eu/install-tensorflow-2.2.0-on-raspberry-64-os.html

next opencv

https://qengineering.eu/install-opencv-4.5-on-raspberry-64-os.html

opencv 4.5.2
# check your memory first
 free -m
# you need at least a total of 6.5 GB!
# if not, enlarge your swap space as explained earlier

uname -a 

 sudo nano /usr/bin/zram.sh
# alter the limit with * 2
mem=$(( ($totalmem / $cores)* 1024 * 3))
 sudo reboot

dependencies
sudo apt-get install build-essential cmake git unzip pkg-config

sudo apt-get install libjpeg-dev libpng-dev

sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev

sudo apt-get install libgtk2.0-dev libcanberra-gtk* libgtk-3-dev

sudo apt-get install libxvidcore-dev libx264-dev

sudo apt-get install python3-dev python3-numpy python3-pip

sudo apt-get install libtbb2 libtbb-dev libdc1394-22-dev

sudo apt-get install libv4l-dev v4l-utils

sudo apt-get install libopenblas-dev libatlas-base-dev libblas-dev

sudo apt-get install liblapack-dev gfortran libhdf5-dev

sudo apt-get install libprotobuf-dev libgoogle-glog-dev libgflags-dev

sudo apt-get install protobuf-compiler




-> 
sudo nano /sbin/dphys-swapfile
CONF_MAXSWAP=5394


# download the latest version
 cd ~
 wget -O opencv.zip https://github.com/opencv/opencv/archive/4.5.2.zip
 wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.5.2.zip
# unpack
 unzip opencv.zip
 unzip opencv_contrib.zip
# some administration to make live easier later on
 mv opencv-4.5.2 opencv
 mv opencv_contrib-4.5.2 opencv_contrib
# clean up the zip files
 rm opencv.zip
 rm opencv_contrib.zip

make the directory to use

 cd ~/opencv
 mkdir build
 cd build

cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \
-D ENABLE_NEON=ON \
-D WITH_OPENMP=ON \
-D WITH_OPENCL=OFF \
-D BUILD_TIFF=ON \
-D WITH_FFMPEG=ON \
-D WITH_TBB=ON \
-D BUILD_TBB=ON \
-D WITH_GSTREAMER=OFF \
-D BUILD_TESTS=OFF \
-D WITH_EIGEN=OFF \
-D WITH_V4L=ON \
-D WITH_LIBV4L=ON \
-D WITH_VTK=OFF \
-D WITH_QT=OFF \
-D OPENCV_ENABLE_NONFREE=ON \
-D INSTALL_C_EXAMPLES=OFF \
-D INSTALL_PYTHON_EXAMPLES=OFF \
-D BUILD_opencv_python3=TRUE \
-D OPENCV_GENERATE_PKGCONFIG=ON \
-D BUILD_EXAMPLES=OFF ..

make -j4

******************************************************************
up till here

 sudo make install
 sudo ldconfig

 cleaning (frees 300 KB)

 make clean

 sudo apt-get update


python3
import cv2
cv2.__version__

should say 4.5.2


!!!!!!!!!!!!! already installed by this point!!!!!!!!!!!!!!!!!!
should look into using ZRAM


Cleaning.
The first thing to do is resetting the swap space back to its original 100 Mbyte if you had dphys-swapfile installed. Flash memory can only write a limited number of cycles. In the end, it will wear your SD card out. It is therefore wise to keep memory swapping to a minimum. Besides, it also slows down your application. That's why we prefer to use zram, as explained in the Raspberry Pi 4 64-bit OS guide.
$ sudo nano /etc/dphys-swapfile

set CONF_SWAPSIZE=100 with the Nano text editor

$ sudo reboot